@using APP.KMX.App.Models
@model ConversionButtonModel

@{
    ViewData["Title"] = "Converter Arquivo";
}

@section Styles {
    <link rel="stylesheet" href="~/css/file-conversion.css" asp-append-version="true" />
}

<div class="file-conversion-main-card">
    <div class="main-card">
        <div>
            <h1>
                Pontos de coordenadas @Model.ConvertFrom para @Model.ConvertTo
            </h1>
            <p>
                Converta suas coordenadas e mapas de maneira rapida e eficiente
            </p>
        </div>        

        <div class="upload-card" id="drag-drop">
            <div>
                <div>
                    <h2>Upload do arquivo</h2>
                    <p>Voce pode enviar apenas 2 arquivos por mes no plano gratuito</p>
                </div>

                <div class="drag-n-drop">
                    <img src="/img/file-upload-icon.svg" alt="File Upload" />
                    SELECIONE SEU ARQUIVO
                    <p>Sao permitidos arquivos com no maximo <strong>10MB</strong></p>
                </div>
                <p>Formatos aceitos: .xls .kml .kmz</p>
            </div>
        </div>
    </div>
</div>

<script>
    const dropArea = document.getElementById('drag-drop');

    // Prevent default behavior (prevent file from being opened)
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => {
            dropArea.classList.add('dragging');
        }, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
        dropArea.addEventListener(eventName, () => {
            dropArea.classList.remove('dragging');
        }, false);
    });

    // Handle dropped files
    dropArea.addEventListener('drop', handleDrop, false);

    function handleDrop(e) {
        let dt = e.dataTransfer;
        let files = dt.files;
        console.log(e);
        handleFiles(files);
    }

    function handleFiles(files) {
        [...files].forEach(uploadFile);
    }

    function uploadFile(file) {
        let formData = new FormData();
        formData.append('file', file);

        fetch('/File/Upload', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (response.ok) {
                    return response.blob();
                } else {
                    return response.json().then(error => {
                        throw new Error(error.message || 'Error during file upload.');
                    });
                }
            })
            .then(blob => {
                // Create a link element for downloading the file
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.style.display = 'none';
                a.href = url;

                // Set the file name for the download
                a.download = file.name.replace(/(\.\w+)?$/, '-converted$1');

                // Append the link, trigger the click, and remove the link
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                a.remove();

                console.log('File downloaded successfully.');
            })
            .catch(error => {
                console.error('Error uploading or downloading file:', error);
                // Optionally, show an error message to the user
            });
    }
</script>